/* Generated by wayland-scanner 1.19.0 */

#ifndef LLP_EXTENSION_SERVER_PROTOCOL_H
#define LLP_EXTENSION_SERVER_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-server.h"

#ifdef  __cplusplus
extern "C" {
#endif

struct wl_client;
struct wl_resource;

/**
 * @page page_llp_extension The llp_extension protocol
 * @section page_ifaces_llp_extension Interfaces
 * - @subpage page_iface_llp_interface - 
 */
struct llp_interface;

#ifndef LLP_INTERFACE_INTERFACE
#define LLP_INTERFACE_INTERFACE
/**
 * @page page_iface_llp_interface llp_interface
 * @section page_iface_llp_interface_api API
 * See @ref iface_llp_interface.
 */
/**
 * @defgroup iface_llp_interface The llp_interface interface
 */
extern const struct wl_interface llp_interface_interface;
#endif

/**
 * @ingroup iface_llp_interface
 * @struct llp_interface_interface
 */
struct llp_interface_interface {
	/**
	 */
	void (*function1)(struct wl_client *client,
			  struct wl_resource *resource,
			  int32_t x,
			  int32_t y,
			  int32_t w,
			  int32_t h);
};

#define LLP_INTERFACE_ONFUNCTION1 0

/**
 * @ingroup iface_llp_interface
 */
#define LLP_INTERFACE_ONFUNCTION1_SINCE_VERSION 1

/**
 * @ingroup iface_llp_interface
 */
#define LLP_INTERFACE_FUNCTION1_SINCE_VERSION 1

/**
 * @ingroup iface_llp_interface
 * Sends an onfunction1 event to the client owning the resource.
 * @param resource_ The client's resource
 */
static inline void
llp_interface_send_onfunction1(struct wl_resource *resource_, int32_t x, int32_t y, int32_t w, int32_t h)
{
	wl_resource_post_event(resource_, LLP_INTERFACE_ONFUNCTION1, x, y, w, h);
}

#ifdef  __cplusplus
}
#endif

#endif
